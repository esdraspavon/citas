{"version":3,"sources":["components/Header.js","components/Form.js","components/Date.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","title","Form","nameRef","React","createRef","ownRef","dateRef","timeRef","symptomRef","state","error","makeNewDate","e","preventDefault","name","_this","current","value","own","date","time","symptom","setState","newDate","id","uuid","makeDate","currentTarget","reset","this","onSubmit","type","placeholder","ref","Component","Date","deleteDate","info","_this$props$info","onClick","List","_this2","message","dates","length","map","components_Date","key","App","concat","Object","toConsumableArray","filter","datesLS","localStorage","getItem","JSON","parse","setItem","stringify","components_Header","components_Form","components_List","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.980f315e.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Header = props => {\n  return (\n    <header>\n      <h1 className=\"text-center\">{props.title}</h1>\n    </header>\n  );\n};\n\nHeader.propTypes = {\n  title: PropTypes.string.isRequired\n};\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport uuid from \"uuid\";\nimport PropTypes from \"prop-types\";\n\nclass Form extends Component {\n  //refs\n  nameRef = React.createRef();\n  ownRef = React.createRef();\n  dateRef = React.createRef();\n  timeRef = React.createRef();\n  symptomRef = React.createRef();\n\n  state = {\n    error: false\n  };\n\n  makeNewDate = e => {\n    e.preventDefault();\n\n    const name = this.nameRef.current.value,\n      own = this.ownRef.current.value,\n      date = this.dateRef.current.value,\n      time = this.timeRef.current.value,\n      symptom = this.symptomRef.current.value;\n\n    if (\n      name === \"\" ||\n      own === \"\" ||\n      date === \"\" ||\n      time === \"\" ||\n      symptom === \"\"\n    ) {\n      this.setState({ error: true });\n    } else {\n      const newDate = {\n        id: uuid(),\n        name,\n        own,\n        date,\n        time,\n        symptom\n      };\n\n      //Se envia el objeto para actualizar el state\n      this.props.makeDate(newDate);\n      //Reiniciar el formulario\n      e.currentTarget.reset();\n      this.setState({ error: false });\n    }\n  };\n  render() {\n    const error = this.state.error;\n    return (\n      <div className=\"card mt-5\">\n        <div className=\"card-body\">\n          <h2 className=\"card-title text-center mb-5\">Agrega las citas aqui</h2>\n          <form onSubmit={this.makeNewDate}>\n            <div className=\"form-group row\">\n              <label className=\"col-sm-12 col-lg-2 col-form-label\">\n                Nombre Mascota\n              </label>\n              <div className=\"col-sm-12 col-lg-10\">\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  placeholder=\"Nombre Mascota\"\n                  ref={this.nameRef}\n                />\n              </div>\n            </div>\n            <div className=\"form-group row\">\n              <label className=\"col-sm-12 col-lg-2 col-form-label\">\n                Nombre Dueño\n              </label>\n              <div className=\"col-sm-12 col-lg-10\">\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  placeholder=\"Nombre Dueño de la Mascota\"\n                  ref={this.ownRef}\n                />\n              </div>\n            </div>\n\n            <div className=\"form-group row\">\n              <label className=\"col-sm-12 col-lg-2 col-form-label\">Fecha</label>\n              <div className=\"col-sm-12 col-lg-4  mb-4 mb-lg-0\">\n                <input\n                  type=\"date\"\n                  className=\"form-control\"\n                  ref={this.dateRef}\n                />\n              </div>\n\n              <label className=\"col-sm-12 col-lg-2 col-form-label\">Hora</label>\n              <div className=\"col-sm-12 col-lg-4\">\n                <input\n                  type=\"time\"\n                  className=\"form-control\"\n                  ref={this.timeRef}\n                />\n              </div>\n            </div>\n\n            <div className=\"form-group row\">\n              <label className=\"col-sm-12 col-lg-2 col-form-label\">\n                Sintomas\n              </label>\n              <div className=\"col-sm-12 col-lg-10\">\n                <textarea className=\"form-control\" ref={this.symptomRef} />\n              </div>\n            </div>\n            <div className=\"form-group row justify-content-end\">\n              <div className=\"col-sm-6\">\n                <button type=\"submit\" className=\"btn btn-success w-100\">\n                  Agregar\n                </button>\n              </div>\n            </div>\n          </form>\n          {error ? (\n            <div className=\"alert alert-danger text-center\">\n              Todos los campos son obligatorios\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nForm.propTypes = {\n  makeDate: PropTypes.func.isRequired\n};\n\nexport default Form;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Date extends Component {\n  deleteDate = () => {\n    this.props.deleteDate(this.props.info.id);\n  };\n\n  render() {\n    const { name, own, date, time, symptom } = this.props.info;\n    return (\n      <div className=\"media mt-3\">\n        <div className=\"media-body\">\n          <h3 className=\"mt-0\">{name}</h3>\n          <div className=\"card-text\">\n            <span>Nombre del dueno: </span>\n            {own}\n          </div>\n          <div className=\"card-text\">\n            <span>Fecha: </span>\n            {date}\n          </div>\n          <div className=\"card-text\">\n            <span>Hora: </span>\n            {time}\n          </div>\n          <div className=\"card-text\">\n            <span>Sintomas: </span>\n            {symptom}\n          </div>\n          <button onClick={this.deleteDate} className=\"btn btn-danger\">\n            Borrar &times;\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nDate.propTypes = {\n  info: PropTypes.shape({\n    date: PropTypes.string.isRequired,\n    time: PropTypes.string.isRequired,\n    own: PropTypes.string.isRequired,\n    symptom: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired\n  }),\n  deleteDate: PropTypes.func.isRequired\n};\n\nexport default Date;\n","import React, { Component } from \"react\";\nimport Date from \"./Date\";\nimport PropTypes from \"prop-types\";\n\nclass List extends Component {\n  state = {};\n  render() {\n    const dates = this.props.dates;\n    const message =\n      dates.length === 0 ? \"No hay citas\" : \"Administra tus citas aqui\";\n\n    return (\n      <div className=\"card mt-5\">\n        <div className=\"card-body\">\n          <h2 className=\"card-title text-center\">{message}</h2>\n          <div className=\"lista-citas\">\n            {this.props.dates.map(date => (\n              <Date\n                key={date.id}\n                info={date}\n                deleteDate={this.props.deleteDate}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nList.propTypes = {\n  dates: PropTypes.array.isRequired,\n  deleteDate: PropTypes.func.isRequired\n};\n\nexport default List;\n","import React, { Component } from \"react\";\nimport Header from \"./components/Header\";\nimport Form from \"./components/Form\";\nimport List from \"./components/List\";\n\nclass App extends Component {\n  state = {\n    dates: []\n  };\n\n  componentDidMount() {\n    const datesLS = localStorage.getItem(\"dates\");\n    if (datesLS) {\n      this.setState({\n        dates: JSON.parse(datesLS)\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem(\"dates\", JSON.stringify(this.state.dates));\n  }\n\n  makeDate = newDate => {\n    const dates = [...this.state.dates, newDate];\n    this.setState({ dates });\n  };\n\n  deleteDate = id => {\n    //Obtener copia del state\n    const oldDates = [...this.state.dates];\n    //borrar el state\n    const dates = oldDates.filter(date => date.id !== id);\n    //Actualizar el state\n    this.setState({ dates });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Header title={\"Administrador de pacientes de veterinaria\"} />\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <Form makeDate={this.makeDate} />\n          </div>\n          <div className=\"col-md-6\">\n            <List dates={this.state.dates} deleteDate={this.deleteDate} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}